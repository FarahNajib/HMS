#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Test_3")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAdm(Adm instance);
  partial void UpdateAdm(Adm instance);
  partial void DeleteAdm(Adm instance);
  partial void InsertCBC_Table(CBC_Table instance);
  partial void UpdateCBC_Table(CBC_Table instance);
  partial void DeleteCBC_Table(CBC_Table instance);
  partial void InsertDepartment_Store(Department_Store instance);
  partial void UpdateDepartment_Store(Department_Store instance);
  partial void DeleteDepartment_Store(Department_Store instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void Insertform_drug(form_drug instance);
  partial void Updateform_drug(form_drug instance);
  partial void Deleteform_drug(form_drug instance);
  partial void InsertItem_Store(Item_Store instance);
  partial void UpdateItem_Store(Item_Store instance);
  partial void DeleteItem_Store(Item_Store instance);
  partial void InsertLog_Room(Log_Room instance);
  partial void UpdateLog_Room(Log_Room instance);
  partial void DeleteLog_Room(Log_Room instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertOrder_ph(Order_ph instance);
  partial void UpdateOrder_ph(Order_ph instance);
  partial void DeleteOrder_ph(Order_ph instance);
  partial void InsertPatient(Patient instance);
  partial void UpdatePatient(Patient instance);
  partial void DeletePatient(Patient instance);
  partial void InsertPayment(Payment instance);
  partial void UpdatePayment(Payment instance);
  partial void DeletePayment(Payment instance);
  partial void InsertPharmacy_Vendor(Pharmacy_Vendor instance);
  partial void UpdatePharmacy_Vendor(Pharmacy_Vendor instance);
  partial void DeletePharmacy_Vendor(Pharmacy_Vendor instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertProduct_Category(Product_Category instance);
  partial void UpdateProduct_Category(Product_Category instance);
  partial void DeleteProduct_Category(Product_Category instance);
  partial void InsertProduct_Detail(Product_Detail instance);
  partial void UpdateProduct_Detail(Product_Detail instance);
  partial void DeleteProduct_Detail(Product_Detail instance);
  partial void InsertRoom(Room instance);
  partial void UpdateRoom(Room instance);
  partial void DeleteRoom(Room instance);
  partial void InsertTest_Name(Test_Name instance);
  partial void UpdateTest_Name(Test_Name instance);
  partial void DeleteTest_Name(Test_Name instance);
  partial void InsertTest_Category(Test_Category instance);
  partial void UpdateTest_Category(Test_Category instance);
  partial void DeleteTest_Category(Test_Category instance);
  partial void InsertUserTable(UserTable instance);
  partial void UpdateUserTable(UserTable instance);
  partial void DeleteUserTable(UserTable instance);
  partial void InsertSer(Ser instance);
  partial void UpdateSer(Ser instance);
  partial void DeleteSer(Ser instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Test_3ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Adm> Adms
	{
		get
		{
			return this.GetTable<Adm>();
		}
	}
	
	public System.Data.Linq.Table<CBC_Table> CBC_Tables
	{
		get
		{
			return this.GetTable<CBC_Table>();
		}
	}
	
	public System.Data.Linq.Table<Department_Store> Department_Stores
	{
		get
		{
			return this.GetTable<Department_Store>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<form_drug> form_drugs
	{
		get
		{
			return this.GetTable<form_drug>();
		}
	}
	
	public System.Data.Linq.Table<Item_Store> Item_Stores
	{
		get
		{
			return this.GetTable<Item_Store>();
		}
	}
	
	public System.Data.Linq.Table<Log_Room> Log_Rooms
	{
		get
		{
			return this.GetTable<Log_Room>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Order_ph> Order_phs
	{
		get
		{
			return this.GetTable<Order_ph>();
		}
	}
	
	public System.Data.Linq.Table<Patient> Patients
	{
		get
		{
			return this.GetTable<Patient>();
		}
	}
	
	public System.Data.Linq.Table<Payment> Payments
	{
		get
		{
			return this.GetTable<Payment>();
		}
	}
	
	public System.Data.Linq.Table<Pharmacy_Vendor> Pharmacy_Vendors
	{
		get
		{
			return this.GetTable<Pharmacy_Vendor>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Product_Category> Product_Categories
	{
		get
		{
			return this.GetTable<Product_Category>();
		}
	}
	
	public System.Data.Linq.Table<Product_Detail> Product_Details
	{
		get
		{
			return this.GetTable<Product_Detail>();
		}
	}
	
	public System.Data.Linq.Table<Room> Rooms
	{
		get
		{
			return this.GetTable<Room>();
		}
	}
	
	public System.Data.Linq.Table<Test_Name> Test_Names
	{
		get
		{
			return this.GetTable<Test_Name>();
		}
	}
	
	public System.Data.Linq.Table<Test_Category> Test_Categories
	{
		get
		{
			return this.GetTable<Test_Category>();
		}
	}
	
	public System.Data.Linq.Table<UserTable> UserTables
	{
		get
		{
			return this.GetTable<UserTable>();
		}
	}
	
	public System.Data.Linq.Table<Ser> Sers
	{
		get
		{
			return this.GetTable<Ser>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adm")]
public partial class Adm : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _A_ID;
	
	private System.Nullable<int> _Room_No_;
	
	private System.Nullable<int> _Patient_Id;
	
	private System.Nullable<int> _E_Id;
	
	private System.Nullable<System.DateTime> _Adm_Date_Time;
	
	private string _Adm_satats;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Room> _Room;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnA_IDChanging(int value);
    partial void OnA_IDChanged();
    partial void OnRoom_No_Changing(System.Nullable<int> value);
    partial void OnRoom_No_Changed();
    partial void OnPatient_IdChanging(System.Nullable<int> value);
    partial void OnPatient_IdChanged();
    partial void OnE_IdChanging(System.Nullable<int> value);
    partial void OnE_IdChanged();
    partial void OnAdm_Date_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAdm_Date_TimeChanged();
    partial void OnAdm_satatsChanging(string value);
    partial void OnAdm_satatsChanged();
    #endregion
	
	public Adm()
	{
		this._Employee = default(EntityRef<Employee>);
		this._Patient = default(EntityRef<Patient>);
		this._Room = default(EntityRef<Room>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int A_ID
	{
		get
		{
			return this._A_ID;
		}
		set
		{
			if ((this._A_ID != value))
			{
				this.OnA_IDChanging(value);
				this.SendPropertyChanging();
				this._A_ID = value;
				this.SendPropertyChanged("A_ID");
				this.OnA_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Room No.]", Storage="_Room_No_", DbType="Int")]
	public System.Nullable<int> Room_No_
	{
		get
		{
			return this._Room_No_;
		}
		set
		{
			if ((this._Room_No_ != value))
			{
				this.OnRoom_No_Changing(value);
				this.SendPropertyChanging();
				this._Room_No_ = value;
				this.SendPropertyChanged("Room_No_");
				this.OnRoom_No_Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Id", DbType="Int")]
	public System.Nullable<int> Patient_Id
	{
		get
		{
			return this._Patient_Id;
		}
		set
		{
			if ((this._Patient_Id != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatient_IdChanging(value);
				this.SendPropertyChanging();
				this._Patient_Id = value;
				this.SendPropertyChanged("Patient_Id");
				this.OnPatient_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Id", DbType="Int")]
	public System.Nullable<int> E_Id
	{
		get
		{
			return this._E_Id;
		}
		set
		{
			if ((this._E_Id != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnE_IdChanging(value);
				this.SendPropertyChanging();
				this._E_Id = value;
				this.SendPropertyChanged("E_Id");
				this.OnE_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adm_Date_Time", DbType="DateTime")]
	public System.Nullable<System.DateTime> Adm_Date_Time
	{
		get
		{
			return this._Adm_Date_Time;
		}
		set
		{
			if ((this._Adm_Date_Time != value))
			{
				this.OnAdm_Date_TimeChanging(value);
				this.SendPropertyChanging();
				this._Adm_Date_Time = value;
				this.SendPropertyChanged("Adm_Date_Time");
				this.OnAdm_Date_TimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adm_satats", DbType="NVarChar(50)")]
	public string Adm_satats
	{
		get
		{
			return this._Adm_satats;
		}
		set
		{
			if ((this._Adm_satats != value))
			{
				this.OnAdm_satatsChanging(value);
				this.SendPropertyChanging();
				this._Adm_satats = value;
				this.SendPropertyChanged("Adm_satats");
				this.OnAdm_satatsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Adm", Storage="_Employee", ThisKey="E_Id", OtherKey="E_ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Adms.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Adms.Add(this);
					this._E_Id = value.E_ID;
				}
				else
				{
					this._E_Id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Adm", Storage="_Patient", ThisKey="Patient_Id", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Adms.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Adms.Add(this);
					this._Patient_Id = value.ID_Patient;
				}
				else
				{
					this._Patient_Id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Adm", Storage="_Room", ThisKey="Room_No_", OtherKey="Room_No_", IsForeignKey=true)]
	public Room Room
	{
		get
		{
			return this._Room.Entity;
		}
		set
		{
			Room previousValue = this._Room.Entity;
			if (((previousValue != value) 
						|| (this._Room.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Room.Entity = null;
					previousValue.Adms.Remove(this);
				}
				this._Room.Entity = value;
				if ((value != null))
				{
					value.Adms.Add(this);
					this._Room_No_ = value.Room_No_;
				}
				else
				{
					this._Room_No_ = default(Nullable<int>);
				}
				this.SendPropertyChanged("Room");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CBC_Table")]
public partial class CBC_Table : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _No_order;
	
	private System.Nullable<double> _WBS;
	
	private System.Nullable<double> _Neutro;
	
	private System.Nullable<double> _Lympho;
	
	private System.Nullable<double> _Mono;
	
	private System.Nullable<double> _Eosino;
	
	private System.Nullable<double> _Baso;
	
	private System.Nullable<double> _Bands;
	
	private System.Nullable<double> _RBC;
	
	private System.Nullable<double> _Hemoglobin;
	
	private System.Nullable<double> _Hematocrit;
	
	private System.Nullable<double> _MCV;
	
	private System.Nullable<double> _MCHC;
	
	private System.Nullable<double> _RDW;
	
	private System.Nullable<double> _Platelets;
	
	private System.Nullable<double> _Bleeding_Time;
	
	private System.Nullable<double> _Coagulation_Time;
	
	private System.Nullable<double> _Reticulocyte__count;
	
	private System.Nullable<double> _E_S_R;
	
	private string _Blood_Group;
	
	private string _Blood_Film_Inspection;
	
	private string _Remarks;
	
	private System.Nullable<double> _MCH;
	
	private System.Nullable<double> _crea;
	
	private System.Nullable<double> _urea;
	
	private System.Nullable<double> _urid;
	
	private EntityRef<Order> _Order;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNo_orderChanging(int value);
    partial void OnNo_orderChanged();
    partial void OnWBSChanging(System.Nullable<double> value);
    partial void OnWBSChanged();
    partial void OnNeutroChanging(System.Nullable<double> value);
    partial void OnNeutroChanged();
    partial void OnLymphoChanging(System.Nullable<double> value);
    partial void OnLymphoChanged();
    partial void OnMonoChanging(System.Nullable<double> value);
    partial void OnMonoChanged();
    partial void OnEosinoChanging(System.Nullable<double> value);
    partial void OnEosinoChanged();
    partial void OnBasoChanging(System.Nullable<double> value);
    partial void OnBasoChanged();
    partial void OnBandsChanging(System.Nullable<double> value);
    partial void OnBandsChanged();
    partial void OnRBCChanging(System.Nullable<double> value);
    partial void OnRBCChanged();
    partial void OnHemoglobinChanging(System.Nullable<double> value);
    partial void OnHemoglobinChanged();
    partial void OnHematocritChanging(System.Nullable<double> value);
    partial void OnHematocritChanged();
    partial void OnMCVChanging(System.Nullable<double> value);
    partial void OnMCVChanged();
    partial void OnMCHCChanging(System.Nullable<double> value);
    partial void OnMCHCChanged();
    partial void OnRDWChanging(System.Nullable<double> value);
    partial void OnRDWChanged();
    partial void OnPlateletsChanging(System.Nullable<double> value);
    partial void OnPlateletsChanged();
    partial void OnBleeding_TimeChanging(System.Nullable<double> value);
    partial void OnBleeding_TimeChanged();
    partial void OnCoagulation_TimeChanging(System.Nullable<double> value);
    partial void OnCoagulation_TimeChanged();
    partial void OnReticulocyte__countChanging(System.Nullable<double> value);
    partial void OnReticulocyte__countChanged();
    partial void OnE_S_RChanging(System.Nullable<double> value);
    partial void OnE_S_RChanged();
    partial void OnBlood_GroupChanging(string value);
    partial void OnBlood_GroupChanged();
    partial void OnBlood_Film_InspectionChanging(string value);
    partial void OnBlood_Film_InspectionChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnMCHChanging(System.Nullable<double> value);
    partial void OnMCHChanged();
    partial void OncreaChanging(System.Nullable<double> value);
    partial void OncreaChanged();
    partial void OnureaChanging(System.Nullable<double> value);
    partial void OnureaChanged();
    partial void OnuridChanging(System.Nullable<double> value);
    partial void OnuridChanged();
    #endregion
	
	public CBC_Table()
	{
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[No.order]", Storage="_No_order", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int No_order
	{
		get
		{
			return this._No_order;
		}
		set
		{
			if ((this._No_order != value))
			{
				this.OnNo_orderChanging(value);
				this.SendPropertyChanging();
				this._No_order = value;
				this.SendPropertyChanged("No_order");
				this.OnNo_orderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WBS", DbType="Float")]
	public System.Nullable<double> WBS
	{
		get
		{
			return this._WBS;
		}
		set
		{
			if ((this._WBS != value))
			{
				this.OnWBSChanging(value);
				this.SendPropertyChanging();
				this._WBS = value;
				this.SendPropertyChanged("WBS");
				this.OnWBSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neutro", DbType="Float")]
	public System.Nullable<double> Neutro
	{
		get
		{
			return this._Neutro;
		}
		set
		{
			if ((this._Neutro != value))
			{
				this.OnNeutroChanging(value);
				this.SendPropertyChanging();
				this._Neutro = value;
				this.SendPropertyChanged("Neutro");
				this.OnNeutroChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lympho", DbType="Float")]
	public System.Nullable<double> Lympho
	{
		get
		{
			return this._Lympho;
		}
		set
		{
			if ((this._Lympho != value))
			{
				this.OnLymphoChanging(value);
				this.SendPropertyChanging();
				this._Lympho = value;
				this.SendPropertyChanged("Lympho");
				this.OnLymphoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mono", DbType="Float")]
	public System.Nullable<double> Mono
	{
		get
		{
			return this._Mono;
		}
		set
		{
			if ((this._Mono != value))
			{
				this.OnMonoChanging(value);
				this.SendPropertyChanging();
				this._Mono = value;
				this.SendPropertyChanged("Mono");
				this.OnMonoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eosino", DbType="Float")]
	public System.Nullable<double> Eosino
	{
		get
		{
			return this._Eosino;
		}
		set
		{
			if ((this._Eosino != value))
			{
				this.OnEosinoChanging(value);
				this.SendPropertyChanging();
				this._Eosino = value;
				this.SendPropertyChanged("Eosino");
				this.OnEosinoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Baso", DbType="Float")]
	public System.Nullable<double> Baso
	{
		get
		{
			return this._Baso;
		}
		set
		{
			if ((this._Baso != value))
			{
				this.OnBasoChanging(value);
				this.SendPropertyChanging();
				this._Baso = value;
				this.SendPropertyChanged("Baso");
				this.OnBasoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bands", DbType="Float")]
	public System.Nullable<double> Bands
	{
		get
		{
			return this._Bands;
		}
		set
		{
			if ((this._Bands != value))
			{
				this.OnBandsChanging(value);
				this.SendPropertyChanging();
				this._Bands = value;
				this.SendPropertyChanged("Bands");
				this.OnBandsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RBC", DbType="Float")]
	public System.Nullable<double> RBC
	{
		get
		{
			return this._RBC;
		}
		set
		{
			if ((this._RBC != value))
			{
				this.OnRBCChanging(value);
				this.SendPropertyChanging();
				this._RBC = value;
				this.SendPropertyChanged("RBC");
				this.OnRBCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hemoglobin", DbType="Float")]
	public System.Nullable<double> Hemoglobin
	{
		get
		{
			return this._Hemoglobin;
		}
		set
		{
			if ((this._Hemoglobin != value))
			{
				this.OnHemoglobinChanging(value);
				this.SendPropertyChanging();
				this._Hemoglobin = value;
				this.SendPropertyChanged("Hemoglobin");
				this.OnHemoglobinChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hematocrit", DbType="Float")]
	public System.Nullable<double> Hematocrit
	{
		get
		{
			return this._Hematocrit;
		}
		set
		{
			if ((this._Hematocrit != value))
			{
				this.OnHematocritChanging(value);
				this.SendPropertyChanging();
				this._Hematocrit = value;
				this.SendPropertyChanged("Hematocrit");
				this.OnHematocritChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCV", DbType="Float")]
	public System.Nullable<double> MCV
	{
		get
		{
			return this._MCV;
		}
		set
		{
			if ((this._MCV != value))
			{
				this.OnMCVChanging(value);
				this.SendPropertyChanging();
				this._MCV = value;
				this.SendPropertyChanged("MCV");
				this.OnMCVChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCHC", DbType="Float")]
	public System.Nullable<double> MCHC
	{
		get
		{
			return this._MCHC;
		}
		set
		{
			if ((this._MCHC != value))
			{
				this.OnMCHCChanging(value);
				this.SendPropertyChanging();
				this._MCHC = value;
				this.SendPropertyChanged("MCHC");
				this.OnMCHCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RDW", DbType="Float")]
	public System.Nullable<double> RDW
	{
		get
		{
			return this._RDW;
		}
		set
		{
			if ((this._RDW != value))
			{
				this.OnRDWChanging(value);
				this.SendPropertyChanging();
				this._RDW = value;
				this.SendPropertyChanged("RDW");
				this.OnRDWChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platelets", DbType="Float")]
	public System.Nullable<double> Platelets
	{
		get
		{
			return this._Platelets;
		}
		set
		{
			if ((this._Platelets != value))
			{
				this.OnPlateletsChanging(value);
				this.SendPropertyChanging();
				this._Platelets = value;
				this.SendPropertyChanged("Platelets");
				this.OnPlateletsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Bleeding Time]", Storage="_Bleeding_Time", DbType="Float")]
	public System.Nullable<double> Bleeding_Time
	{
		get
		{
			return this._Bleeding_Time;
		}
		set
		{
			if ((this._Bleeding_Time != value))
			{
				this.OnBleeding_TimeChanging(value);
				this.SendPropertyChanging();
				this._Bleeding_Time = value;
				this.SendPropertyChanged("Bleeding_Time");
				this.OnBleeding_TimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Coagulation Time]", Storage="_Coagulation_Time", DbType="Float")]
	public System.Nullable<double> Coagulation_Time
	{
		get
		{
			return this._Coagulation_Time;
		}
		set
		{
			if ((this._Coagulation_Time != value))
			{
				this.OnCoagulation_TimeChanging(value);
				this.SendPropertyChanging();
				this._Coagulation_Time = value;
				this.SendPropertyChanged("Coagulation_Time");
				this.OnCoagulation_TimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Reticulocyte  count]", Storage="_Reticulocyte__count", DbType="Float")]
	public System.Nullable<double> Reticulocyte__count
	{
		get
		{
			return this._Reticulocyte__count;
		}
		set
		{
			if ((this._Reticulocyte__count != value))
			{
				this.OnReticulocyte__countChanging(value);
				this.SendPropertyChanging();
				this._Reticulocyte__count = value;
				this.SendPropertyChanged("Reticulocyte__count");
				this.OnReticulocyte__countChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E.S.R]", Storage="_E_S_R", DbType="Float")]
	public System.Nullable<double> E_S_R
	{
		get
		{
			return this._E_S_R;
		}
		set
		{
			if ((this._E_S_R != value))
			{
				this.OnE_S_RChanging(value);
				this.SendPropertyChanging();
				this._E_S_R = value;
				this.SendPropertyChanged("E_S_R");
				this.OnE_S_RChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Blood Group]", Storage="_Blood_Group", DbType="NChar(10)")]
	public string Blood_Group
	{
		get
		{
			return this._Blood_Group;
		}
		set
		{
			if ((this._Blood_Group != value))
			{
				this.OnBlood_GroupChanging(value);
				this.SendPropertyChanging();
				this._Blood_Group = value;
				this.SendPropertyChanged("Blood_Group");
				this.OnBlood_GroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Blood Film Inspection]", Storage="_Blood_Film_Inspection", DbType="NVarChar(50)")]
	public string Blood_Film_Inspection
	{
		get
		{
			return this._Blood_Film_Inspection;
		}
		set
		{
			if ((this._Blood_Film_Inspection != value))
			{
				this.OnBlood_Film_InspectionChanging(value);
				this.SendPropertyChanging();
				this._Blood_Film_Inspection = value;
				this.SendPropertyChanged("Blood_Film_Inspection");
				this.OnBlood_Film_InspectionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(1000)")]
	public string Remarks
	{
		get
		{
			return this._Remarks;
		}
		set
		{
			if ((this._Remarks != value))
			{
				this.OnRemarksChanging(value);
				this.SendPropertyChanging();
				this._Remarks = value;
				this.SendPropertyChanged("Remarks");
				this.OnRemarksChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCH", DbType="Float")]
	public System.Nullable<double> MCH
	{
		get
		{
			return this._MCH;
		}
		set
		{
			if ((this._MCH != value))
			{
				this.OnMCHChanging(value);
				this.SendPropertyChanging();
				this._MCH = value;
				this.SendPropertyChanged("MCH");
				this.OnMCHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_crea", DbType="Float")]
	public System.Nullable<double> crea
	{
		get
		{
			return this._crea;
		}
		set
		{
			if ((this._crea != value))
			{
				this.OncreaChanging(value);
				this.SendPropertyChanging();
				this._crea = value;
				this.SendPropertyChanged("crea");
				this.OncreaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urea", DbType="Float")]
	public System.Nullable<double> urea
	{
		get
		{
			return this._urea;
		}
		set
		{
			if ((this._urea != value))
			{
				this.OnureaChanging(value);
				this.SendPropertyChanging();
				this._urea = value;
				this.SendPropertyChanged("urea");
				this.OnureaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urid", DbType="Float")]
	public System.Nullable<double> urid
	{
		get
		{
			return this._urid;
		}
		set
		{
			if ((this._urid != value))
			{
				this.OnuridChanging(value);
				this.SendPropertyChanging();
				this._urid = value;
				this.SendPropertyChanged("urid");
				this.OnuridChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_CBC_Table", Storage="_Order", ThisKey="No_order", OtherKey="OrderNO", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.CBC_Table = null;
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.CBC_Table = this;
					this._No_order = value.OrderNO;
				}
				else
				{
					this._No_order = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department_Store")]
public partial class Department_Store : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Store_ID;
	
	private string _Store_Name;
	
	private EntitySet<Item_Store> _Item_Stores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStore_IDChanging(string value);
    partial void OnStore_IDChanged();
    partial void OnStore_NameChanging(string value);
    partial void OnStore_NameChanged();
    #endregion
	
	public Department_Store()
	{
		this._Item_Stores = new EntitySet<Item_Store>(new Action<Item_Store>(this.attach_Item_Stores), new Action<Item_Store>(this.detach_Item_Stores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Store_ID
	{
		get
		{
			return this._Store_ID;
		}
		set
		{
			if ((this._Store_ID != value))
			{
				this.OnStore_IDChanging(value);
				this.SendPropertyChanging();
				this._Store_ID = value;
				this.SendPropertyChanged("Store_ID");
				this.OnStore_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_Name", DbType="NVarChar(50)")]
	public string Store_Name
	{
		get
		{
			return this._Store_Name;
		}
		set
		{
			if ((this._Store_Name != value))
			{
				this.OnStore_NameChanging(value);
				this.SendPropertyChanging();
				this._Store_Name = value;
				this.SendPropertyChanged("Store_Name");
				this.OnStore_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Store_Item_Store", Storage="_Item_Stores", ThisKey="Store_ID", OtherKey="Store_ID")]
	public EntitySet<Item_Store> Item_Stores
	{
		get
		{
			return this._Item_Stores;
		}
		set
		{
			this._Item_Stores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Item_Stores(Item_Store entity)
	{
		this.SendPropertyChanging();
		entity.Department_Store = this;
	}
	
	private void detach_Item_Stores(Item_Store entity)
	{
		this.SendPropertyChanging();
		entity.Department_Store = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _E_ID;
	
	private string _E_NAME;
	
	private string _E_FATHER_NAME;
	
	private string _E_SARNAME;
	
	private string _E_MOTHER_NAME___TITLE;
	
	private string _E_PLACE_OF_BIRTH;
	
	private System.DateTime _E_DATE_OF_BIRTH;
	
	private string _GENDER;
	
	private System.Nullable<int> _AGE;
	
	private string _ADDESS;
	
	private string _PHONE;
	
	private string _MOBILE_PHONE;
	
	private string _MARITAL_SATUS;
	
	private string _SECRETARIAT;
	
	private string _Constraint;
	
	private System.DateTime _DATE_OF_THE_GRANT_ID_CARD;
	
	private string _NOTIONAL_NO;
	
	private System.DateTime _JOIN_DATE;
	
	private EntitySet<Adm> _Adms;
	
	private EntityRef<UserTable> _UserTable;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_IDChanging(int value);
    partial void OnE_IDChanged();
    partial void OnE_NAMEChanging(string value);
    partial void OnE_NAMEChanged();
    partial void OnE_FATHER_NAMEChanging(string value);
    partial void OnE_FATHER_NAMEChanged();
    partial void OnE_SARNAMEChanging(string value);
    partial void OnE_SARNAMEChanged();
    partial void OnE_MOTHER_NAME___TITLEChanging(string value);
    partial void OnE_MOTHER_NAME___TITLEChanged();
    partial void OnE_PLACE_OF_BIRTHChanging(string value);
    partial void OnE_PLACE_OF_BIRTHChanged();
    partial void OnE_DATE_OF_BIRTHChanging(System.DateTime value);
    partial void OnE_DATE_OF_BIRTHChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnAGEChanging(System.Nullable<int> value);
    partial void OnAGEChanged();
    partial void OnADDESSChanging(string value);
    partial void OnADDESSChanged();
    partial void OnPHONEChanging(string value);
    partial void OnPHONEChanged();
    partial void OnMOBILE_PHONEChanging(string value);
    partial void OnMOBILE_PHONEChanged();
    partial void OnMARITAL_SATUSChanging(string value);
    partial void OnMARITAL_SATUSChanged();
    partial void OnSECRETARIATChanging(string value);
    partial void OnSECRETARIATChanged();
    partial void OnConstraintChanging(string value);
    partial void OnConstraintChanged();
    partial void OnDATE_OF_THE_GRANT_ID_CARDChanging(System.DateTime value);
    partial void OnDATE_OF_THE_GRANT_ID_CARDChanged();
    partial void OnNOTIONAL_NOChanging(string value);
    partial void OnNOTIONAL_NOChanged();
    partial void OnJOIN_DATEChanging(System.DateTime value);
    partial void OnJOIN_DATEChanged();
    #endregion
	
	public Employee()
	{
		this._Adms = new EntitySet<Adm>(new Action<Adm>(this.attach_Adms), new Action<Adm>(this.detach_Adms));
		this._UserTable = default(EntityRef<UserTable>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int E_ID
	{
		get
		{
			return this._E_ID;
		}
		set
		{
			if ((this._E_ID != value))
			{
				this.OnE_IDChanging(value);
				this.SendPropertyChanging();
				this._E_ID = value;
				this.SendPropertyChanged("E_ID");
				this.OnE_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string E_NAME
	{
		get
		{
			return this._E_NAME;
		}
		set
		{
			if ((this._E_NAME != value))
			{
				this.OnE_NAMEChanging(value);
				this.SendPropertyChanging();
				this._E_NAME = value;
				this.SendPropertyChanged("E_NAME");
				this.OnE_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_FATHER_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string E_FATHER_NAME
	{
		get
		{
			return this._E_FATHER_NAME;
		}
		set
		{
			if ((this._E_FATHER_NAME != value))
			{
				this.OnE_FATHER_NAMEChanging(value);
				this.SendPropertyChanging();
				this._E_FATHER_NAME = value;
				this.SendPropertyChanged("E_FATHER_NAME");
				this.OnE_FATHER_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_SARNAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string E_SARNAME
	{
		get
		{
			return this._E_SARNAME;
		}
		set
		{
			if ((this._E_SARNAME != value))
			{
				this.OnE_SARNAMEChanging(value);
				this.SendPropertyChanging();
				this._E_SARNAME = value;
				this.SendPropertyChanged("E_SARNAME");
				this.OnE_SARNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E_MOTHER_NAME[&]]TITLE]", Storage="_E_MOTHER_NAME___TITLE", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string E_MOTHER_NAME___TITLE
	{
		get
		{
			return this._E_MOTHER_NAME___TITLE;
		}
		set
		{
			if ((this._E_MOTHER_NAME___TITLE != value))
			{
				this.OnE_MOTHER_NAME___TITLEChanging(value);
				this.SendPropertyChanging();
				this._E_MOTHER_NAME___TITLE = value;
				this.SendPropertyChanged("E_MOTHER_NAME___TITLE");
				this.OnE_MOTHER_NAME___TITLEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_PLACE_OF_BIRTH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string E_PLACE_OF_BIRTH
	{
		get
		{
			return this._E_PLACE_OF_BIRTH;
		}
		set
		{
			if ((this._E_PLACE_OF_BIRTH != value))
			{
				this.OnE_PLACE_OF_BIRTHChanging(value);
				this.SendPropertyChanging();
				this._E_PLACE_OF_BIRTH = value;
				this.SendPropertyChanged("E_PLACE_OF_BIRTH");
				this.OnE_PLACE_OF_BIRTHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_DATE_OF_BIRTH", DbType="Date NOT NULL")]
	public System.DateTime E_DATE_OF_BIRTH
	{
		get
		{
			return this._E_DATE_OF_BIRTH;
		}
		set
		{
			if ((this._E_DATE_OF_BIRTH != value))
			{
				this.OnE_DATE_OF_BIRTHChanging(value);
				this.SendPropertyChanging();
				this._E_DATE_OF_BIRTH = value;
				this.SendPropertyChanged("E_DATE_OF_BIRTH");
				this.OnE_DATE_OF_BIRTHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string GENDER
	{
		get
		{
			return this._GENDER;
		}
		set
		{
			if ((this._GENDER != value))
			{
				this.OnGENDERChanging(value);
				this.SendPropertyChanging();
				this._GENDER = value;
				this.SendPropertyChanged("GENDER");
				this.OnGENDERChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AGE", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> AGE
	{
		get
		{
			return this._AGE;
		}
		set
		{
			if ((this._AGE != value))
			{
				this.OnAGEChanging(value);
				this.SendPropertyChanging();
				this._AGE = value;
				this.SendPropertyChanged("AGE");
				this.OnAGEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDESS", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
	public string ADDESS
	{
		get
		{
			return this._ADDESS;
		}
		set
		{
			if ((this._ADDESS != value))
			{
				this.OnADDESSChanging(value);
				this.SendPropertyChanging();
				this._ADDESS = value;
				this.SendPropertyChanged("ADDESS");
				this.OnADDESSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE", DbType="NVarChar(18) NOT NULL", CanBeNull=false)]
	public string PHONE
	{
		get
		{
			return this._PHONE;
		}
		set
		{
			if ((this._PHONE != value))
			{
				this.OnPHONEChanging(value);
				this.SendPropertyChanging();
				this._PHONE = value;
				this.SendPropertyChanged("PHONE");
				this.OnPHONEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOBILE_PHONE", DbType="NVarChar(18) NOT NULL", CanBeNull=false)]
	public string MOBILE_PHONE
	{
		get
		{
			return this._MOBILE_PHONE;
		}
		set
		{
			if ((this._MOBILE_PHONE != value))
			{
				this.OnMOBILE_PHONEChanging(value);
				this.SendPropertyChanging();
				this._MOBILE_PHONE = value;
				this.SendPropertyChanged("MOBILE_PHONE");
				this.OnMOBILE_PHONEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MARITAL_SATUS", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string MARITAL_SATUS
	{
		get
		{
			return this._MARITAL_SATUS;
		}
		set
		{
			if ((this._MARITAL_SATUS != value))
			{
				this.OnMARITAL_SATUSChanging(value);
				this.SendPropertyChanging();
				this._MARITAL_SATUS = value;
				this.SendPropertyChanged("MARITAL_SATUS");
				this.OnMARITAL_SATUSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SECRETARIAT", DbType="NVarChar(10)")]
	public string SECRETARIAT
	{
		get
		{
			return this._SECRETARIAT;
		}
		set
		{
			if ((this._SECRETARIAT != value))
			{
				this.OnSECRETARIATChanging(value);
				this.SendPropertyChanging();
				this._SECRETARIAT = value;
				this.SendPropertyChanged("SECRETARIAT");
				this.OnSECRETARIATChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Constraint]", Storage="_Constraint", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Constraint
	{
		get
		{
			return this._Constraint;
		}
		set
		{
			if ((this._Constraint != value))
			{
				this.OnConstraintChanging(value);
				this.SendPropertyChanging();
				this._Constraint = value;
				this.SendPropertyChanged("Constraint");
				this.OnConstraintChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_OF_THE_GRANT_ID_CARD", DbType="Date NOT NULL")]
	public System.DateTime DATE_OF_THE_GRANT_ID_CARD
	{
		get
		{
			return this._DATE_OF_THE_GRANT_ID_CARD;
		}
		set
		{
			if ((this._DATE_OF_THE_GRANT_ID_CARD != value))
			{
				this.OnDATE_OF_THE_GRANT_ID_CARDChanging(value);
				this.SendPropertyChanging();
				this._DATE_OF_THE_GRANT_ID_CARD = value;
				this.SendPropertyChanged("DATE_OF_THE_GRANT_ID_CARD");
				this.OnDATE_OF_THE_GRANT_ID_CARDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOTIONAL_NO", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string NOTIONAL_NO
	{
		get
		{
			return this._NOTIONAL_NO;
		}
		set
		{
			if ((this._NOTIONAL_NO != value))
			{
				this.OnNOTIONAL_NOChanging(value);
				this.SendPropertyChanging();
				this._NOTIONAL_NO = value;
				this.SendPropertyChanged("NOTIONAL_NO");
				this.OnNOTIONAL_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JOIN_DATE", DbType="Date NOT NULL")]
	public System.DateTime JOIN_DATE
	{
		get
		{
			return this._JOIN_DATE;
		}
		set
		{
			if ((this._JOIN_DATE != value))
			{
				this.OnJOIN_DATEChanging(value);
				this.SendPropertyChanging();
				this._JOIN_DATE = value;
				this.SendPropertyChanged("JOIN_DATE");
				this.OnJOIN_DATEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Adm", Storage="_Adms", ThisKey="E_ID", OtherKey="E_Id")]
	public EntitySet<Adm> Adms
	{
		get
		{
			return this._Adms;
		}
		set
		{
			this._Adms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_UserTable", Storage="_UserTable", ThisKey="E_ID", OtherKey="EM_ID", IsUnique=true, IsForeignKey=false)]
	public UserTable UserTable
	{
		get
		{
			return this._UserTable.Entity;
		}
		set
		{
			UserTable previousValue = this._UserTable.Entity;
			if (((previousValue != value) 
						|| (this._UserTable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserTable.Entity = null;
					previousValue.Employee = null;
				}
				this._UserTable.Entity = value;
				if ((value != null))
				{
					value.Employee = this;
				}
				this.SendPropertyChanged("UserTable");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.form_drug")]
public partial class form_drug : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _F_ID;
	
	private string _F_Name;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnF_IDChanging(string value);
    partial void OnF_IDChanged();
    partial void OnF_NameChanging(string value);
    partial void OnF_NameChanged();
    #endregion
	
	public form_drug()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string F_ID
	{
		get
		{
			return this._F_ID;
		}
		set
		{
			if ((this._F_ID != value))
			{
				this.OnF_IDChanging(value);
				this.SendPropertyChanging();
				this._F_ID = value;
				this.SendPropertyChanged("F_ID");
				this.OnF_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_Name", DbType="NVarChar(50)")]
	public string F_Name
	{
		get
		{
			return this._F_Name;
		}
		set
		{
			if ((this._F_Name != value))
			{
				this.OnF_NameChanging(value);
				this.SendPropertyChanging();
				this._F_Name = value;
				this.SendPropertyChanged("F_Name");
				this.OnF_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="form_drug_Product", Storage="_Products", ThisKey="F_ID", OtherKey="id_form")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.form_drug = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.form_drug = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_Store")]
public partial class Item_Store : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _itemID;
	
	private System.Nullable<int> _betch_ID;
	
	private string _Store_ID;
	
	private System.Nullable<int> _Quntity;
	
	private System.Nullable<int> _using;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _complete;
	
	private string _Namepro;
	
	private EntityRef<Department_Store> _Department_Store;
	
	private EntityRef<Product_Detail> _Product_Detail;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void Onbetch_IDChanging(System.Nullable<int> value);
    partial void Onbetch_IDChanged();
    partial void OnStore_IDChanging(string value);
    partial void OnStore_IDChanged();
    partial void OnQuntityChanging(System.Nullable<int> value);
    partial void OnQuntityChanged();
    partial void OnusingChanging(System.Nullable<int> value);
    partial void OnusingChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OncompleteChanging(string value);
    partial void OncompleteChanged();
    partial void OnNameproChanging(string value);
    partial void OnNameproChanged();
    #endregion
	
	public Item_Store()
	{
		this._Department_Store = default(EntityRef<Department_Store>);
		this._Product_Detail = default(EntityRef<Product_Detail>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int itemID
	{
		get
		{
			return this._itemID;
		}
		set
		{
			if ((this._itemID != value))
			{
				this.OnitemIDChanging(value);
				this.SendPropertyChanging();
				this._itemID = value;
				this.SendPropertyChanged("itemID");
				this.OnitemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_betch_ID", DbType="Int")]
	public System.Nullable<int> betch_ID
	{
		get
		{
			return this._betch_ID;
		}
		set
		{
			if ((this._betch_ID != value))
			{
				if (this._Product_Detail.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onbetch_IDChanging(value);
				this.SendPropertyChanging();
				this._betch_ID = value;
				this.SendPropertyChanged("betch_ID");
				this.Onbetch_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_ID", DbType="NVarChar(10)")]
	public string Store_ID
	{
		get
		{
			return this._Store_ID;
		}
		set
		{
			if ((this._Store_ID != value))
			{
				if (this._Department_Store.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStore_IDChanging(value);
				this.SendPropertyChanging();
				this._Store_ID = value;
				this.SendPropertyChanged("Store_ID");
				this.OnStore_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quntity", DbType="Int")]
	public System.Nullable<int> Quntity
	{
		get
		{
			return this._Quntity;
		}
		set
		{
			if ((this._Quntity != value))
			{
				this.OnQuntityChanging(value);
				this.SendPropertyChanging();
				this._Quntity = value;
				this.SendPropertyChanged("Quntity");
				this.OnQuntityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="using", Storage="_using", DbType="Int")]
	public System.Nullable<int> @using
	{
		get
		{
			return this._using;
		}
		set
		{
			if ((this._using != value))
			{
				this.OnusingChanging(value);
				this.SendPropertyChanging();
				this._using = value;
				this.SendPropertyChanged("@using");
				this.OnusingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_complete", DbType="NVarChar(10)")]
	public string complete
	{
		get
		{
			return this._complete;
		}
		set
		{
			if ((this._complete != value))
			{
				this.OncompleteChanging(value);
				this.SendPropertyChanging();
				this._complete = value;
				this.SendPropertyChanged("complete");
				this.OncompleteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Namepro", DbType="NVarChar(50)")]
	public string Namepro
	{
		get
		{
			return this._Namepro;
		}
		set
		{
			if ((this._Namepro != value))
			{
				this.OnNameproChanging(value);
				this.SendPropertyChanging();
				this._Namepro = value;
				this.SendPropertyChanged("Namepro");
				this.OnNameproChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Store_Item_Store", Storage="_Department_Store", ThisKey="Store_ID", OtherKey="Store_ID", IsForeignKey=true)]
	public Department_Store Department_Store
	{
		get
		{
			return this._Department_Store.Entity;
		}
		set
		{
			Department_Store previousValue = this._Department_Store.Entity;
			if (((previousValue != value) 
						|| (this._Department_Store.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department_Store.Entity = null;
					previousValue.Item_Stores.Remove(this);
				}
				this._Department_Store.Entity = value;
				if ((value != null))
				{
					value.Item_Stores.Add(this);
					this._Store_ID = value.Store_ID;
				}
				else
				{
					this._Store_ID = default(string);
				}
				this.SendPropertyChanged("Department_Store");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail_Item_Store", Storage="_Product_Detail", ThisKey="betch_ID", OtherKey="Batch__Number", IsForeignKey=true)]
	public Product_Detail Product_Detail
	{
		get
		{
			return this._Product_Detail.Entity;
		}
		set
		{
			Product_Detail previousValue = this._Product_Detail.Entity;
			if (((previousValue != value) 
						|| (this._Product_Detail.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product_Detail.Entity = null;
					previousValue.Item_Stores.Remove(this);
				}
				this._Product_Detail.Entity = value;
				if ((value != null))
				{
					value.Item_Stores.Add(this);
					this._betch_ID = value.Batch__Number;
				}
				else
				{
					this._betch_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Product_Detail");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Log_Room")]
public partial class Log_Room : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Patient_ID;
	
	private int _Room_NO;
	
	private string _Ge_LOG;
	
	private System.Nullable<double> _Tempreture_Patient;
	
	private System.Nullable<double> _The_patient_s_pulse;
	
	private System.Nullable<double> _Pressure_patient;
	
	private string _Prescription;
	
	private int _Log_out_NO;
	
	private System.Nullable<System.DateTime> _logdate;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Room> _Room;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnRoom_NOChanging(int value);
    partial void OnRoom_NOChanged();
    partial void OnGe_LOGChanging(string value);
    partial void OnGe_LOGChanged();
    partial void OnTempreture_PatientChanging(System.Nullable<double> value);
    partial void OnTempreture_PatientChanged();
    partial void OnThe_patient_s_pulseChanging(System.Nullable<double> value);
    partial void OnThe_patient_s_pulseChanged();
    partial void OnPressure_patientChanging(System.Nullable<double> value);
    partial void OnPressure_patientChanged();
    partial void OnPrescriptionChanging(string value);
    partial void OnPrescriptionChanged();
    partial void OnLog_out_NOChanging(int value);
    partial void OnLog_out_NOChanged();
    partial void OnlogdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlogdateChanged();
    #endregion
	
	public Log_Room()
	{
		this._Patient = default(EntityRef<Patient>);
		this._Room = default(EntityRef<Room>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
	public int Patient_ID
	{
		get
		{
			return this._Patient_ID;
		}
		set
		{
			if ((this._Patient_ID != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatient_IDChanging(value);
				this.SendPropertyChanging();
				this._Patient_ID = value;
				this.SendPropertyChanged("Patient_ID");
				this.OnPatient_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_NO", DbType="Int NOT NULL")]
	public int Room_NO
	{
		get
		{
			return this._Room_NO;
		}
		set
		{
			if ((this._Room_NO != value))
			{
				if (this._Room.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoom_NOChanging(value);
				this.SendPropertyChanging();
				this._Room_NO = value;
				this.SendPropertyChanged("Room_NO");
				this.OnRoom_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ge_LOG", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Ge_LOG
	{
		get
		{
			return this._Ge_LOG;
		}
		set
		{
			if ((this._Ge_LOG != value))
			{
				this.OnGe_LOGChanging(value);
				this.SendPropertyChanging();
				this._Ge_LOG = value;
				this.SendPropertyChanged("Ge_LOG");
				this.OnGe_LOGChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tempreture_Patient", DbType="Float")]
	public System.Nullable<double> Tempreture_Patient
	{
		get
		{
			return this._Tempreture_Patient;
		}
		set
		{
			if ((this._Tempreture_Patient != value))
			{
				this.OnTempreture_PatientChanging(value);
				this.SendPropertyChanging();
				this._Tempreture_Patient = value;
				this.SendPropertyChanged("Tempreture_Patient");
				this.OnTempreture_PatientChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[The patient\'s pulse]", Storage="_The_patient_s_pulse", DbType="Float")]
	public System.Nullable<double> The_patient_s_pulse
	{
		get
		{
			return this._The_patient_s_pulse;
		}
		set
		{
			if ((this._The_patient_s_pulse != value))
			{
				this.OnThe_patient_s_pulseChanging(value);
				this.SendPropertyChanging();
				this._The_patient_s_pulse = value;
				this.SendPropertyChanged("The_patient_s_pulse");
				this.OnThe_patient_s_pulseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Pressure patient]", Storage="_Pressure_patient", DbType="Float")]
	public System.Nullable<double> Pressure_patient
	{
		get
		{
			return this._Pressure_patient;
		}
		set
		{
			if ((this._Pressure_patient != value))
			{
				this.OnPressure_patientChanging(value);
				this.SendPropertyChanging();
				this._Pressure_patient = value;
				this.SendPropertyChanged("Pressure_patient");
				this.OnPressure_patientChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prescription", DbType="NVarChar(1000)")]
	public string Prescription
	{
		get
		{
			return this._Prescription;
		}
		set
		{
			if ((this._Prescription != value))
			{
				this.OnPrescriptionChanging(value);
				this.SendPropertyChanging();
				this._Prescription = value;
				this.SendPropertyChanged("Prescription");
				this.OnPrescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_out_NO", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Log_out_NO
	{
		get
		{
			return this._Log_out_NO;
		}
		set
		{
			if ((this._Log_out_NO != value))
			{
				this.OnLog_out_NOChanging(value);
				this.SendPropertyChanging();
				this._Log_out_NO = value;
				this.SendPropertyChanged("Log_out_NO");
				this.OnLog_out_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> logdate
	{
		get
		{
			return this._logdate;
		}
		set
		{
			if ((this._logdate != value))
			{
				this.OnlogdateChanging(value);
				this.SendPropertyChanging();
				this._logdate = value;
				this.SendPropertyChanged("logdate");
				this.OnlogdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Log_Room", Storage="_Patient", ThisKey="Patient_ID", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Log_Rooms.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Log_Rooms.Add(this);
					this._Patient_ID = value.ID_Patient;
				}
				else
				{
					this._Patient_ID = default(int);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Log_Room", Storage="_Room", ThisKey="Room_NO", OtherKey="Room_No_", IsForeignKey=true)]
	public Room Room
	{
		get
		{
			return this._Room.Entity;
		}
		set
		{
			Room previousValue = this._Room.Entity;
			if (((previousValue != value) 
						|| (this._Room.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Room.Entity = null;
					previousValue.Log_Rooms.Remove(this);
				}
				this._Room.Entity = value;
				if ((value != null))
				{
					value.Log_Rooms.Add(this);
					this._Room_NO = value.Room_No_;
				}
				else
				{
					this._Room_NO = default(int);
				}
				this.SendPropertyChanged("Room");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderNO;
	
	private System.Nullable<int> _P_ID;
	
	private System.Nullable<int> _E_ID;
	
	private System.Nullable<System.DateTime> _Rq_Date;
	
	private System.Nullable<System.DateTime> _Test_Date;
	
	private string _O_Status;
	
	private string _Detail;
	
	private System.Nullable<int> _Test_ID;
	
	private string _pay_com;
	
	private EntityRef<CBC_Table> _CBC_Table;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Test_Name> _Test_Name;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderNOChanging(int value);
    partial void OnOrderNOChanged();
    partial void OnP_IDChanging(System.Nullable<int> value);
    partial void OnP_IDChanged();
    partial void OnE_IDChanging(System.Nullable<int> value);
    partial void OnE_IDChanged();
    partial void OnRq_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRq_DateChanged();
    partial void OnTest_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTest_DateChanged();
    partial void OnO_StatusChanging(string value);
    partial void OnO_StatusChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnTest_IDChanging(System.Nullable<int> value);
    partial void OnTest_IDChanged();
    partial void Onpay_comChanging(string value);
    partial void Onpay_comChanged();
    #endregion
	
	public Order()
	{
		this._CBC_Table = default(EntityRef<CBC_Table>);
		this._Patient = default(EntityRef<Patient>);
		this._Test_Name = default(EntityRef<Test_Name>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNO", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderNO
	{
		get
		{
			return this._OrderNO;
		}
		set
		{
			if ((this._OrderNO != value))
			{
				this.OnOrderNOChanging(value);
				this.SendPropertyChanging();
				this._OrderNO = value;
				this.SendPropertyChanged("OrderNO");
				this.OnOrderNOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_ID", DbType="Int")]
	public System.Nullable<int> P_ID
	{
		get
		{
			return this._P_ID;
		}
		set
		{
			if ((this._P_ID != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnP_IDChanging(value);
				this.SendPropertyChanging();
				this._P_ID = value;
				this.SendPropertyChanged("P_ID");
				this.OnP_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", DbType="Int")]
	public System.Nullable<int> E_ID
	{
		get
		{
			return this._E_ID;
		}
		set
		{
			if ((this._E_ID != value))
			{
				this.OnE_IDChanging(value);
				this.SendPropertyChanging();
				this._E_ID = value;
				this.SendPropertyChanged("E_ID");
				this.OnE_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rq_Date", DbType="Date")]
	public System.Nullable<System.DateTime> Rq_Date
	{
		get
		{
			return this._Rq_Date;
		}
		set
		{
			if ((this._Rq_Date != value))
			{
				this.OnRq_DateChanging(value);
				this.SendPropertyChanging();
				this._Rq_Date = value;
				this.SendPropertyChanged("Rq_Date");
				this.OnRq_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Test_Date
	{
		get
		{
			return this._Test_Date;
		}
		set
		{
			if ((this._Test_Date != value))
			{
				this.OnTest_DateChanging(value);
				this.SendPropertyChanging();
				this._Test_Date = value;
				this.SendPropertyChanged("Test_Date");
				this.OnTest_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O_Status", DbType="NVarChar(50)")]
	public string O_Status
	{
		get
		{
			return this._O_Status;
		}
		set
		{
			if ((this._O_Status != value))
			{
				this.OnO_StatusChanging(value);
				this.SendPropertyChanging();
				this._O_Status = value;
				this.SendPropertyChanged("O_Status");
				this.OnO_StatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(1000)")]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_ID", DbType="Int")]
	public System.Nullable<int> Test_ID
	{
		get
		{
			return this._Test_ID;
		}
		set
		{
			if ((this._Test_ID != value))
			{
				if (this._Test_Name.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTest_IDChanging(value);
				this.SendPropertyChanging();
				this._Test_ID = value;
				this.SendPropertyChanged("Test_ID");
				this.OnTest_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pay_com", DbType="NVarChar(50)")]
	public string pay_com
	{
		get
		{
			return this._pay_com;
		}
		set
		{
			if ((this._pay_com != value))
			{
				this.Onpay_comChanging(value);
				this.SendPropertyChanging();
				this._pay_com = value;
				this.SendPropertyChanged("pay_com");
				this.Onpay_comChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_CBC_Table", Storage="_CBC_Table", ThisKey="OrderNO", OtherKey="No_order", IsUnique=true, IsForeignKey=false)]
	public CBC_Table CBC_Table
	{
		get
		{
			return this._CBC_Table.Entity;
		}
		set
		{
			CBC_Table previousValue = this._CBC_Table.Entity;
			if (((previousValue != value) 
						|| (this._CBC_Table.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CBC_Table.Entity = null;
					previousValue.Order = null;
				}
				this._CBC_Table.Entity = value;
				if ((value != null))
				{
					value.Order = this;
				}
				this.SendPropertyChanged("CBC_Table");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Order", Storage="_Patient", ThisKey="P_ID", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._P_ID = value.ID_Patient;
				}
				else
				{
					this._P_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Name_Order", Storage="_Test_Name", ThisKey="Test_ID", OtherKey="ID_Test", IsForeignKey=true)]
	public Test_Name Test_Name
	{
		get
		{
			return this._Test_Name.Entity;
		}
		set
		{
			Test_Name previousValue = this._Test_Name.Entity;
			if (((previousValue != value) 
						|| (this._Test_Name.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Name.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Test_Name.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._Test_ID = value.ID_Test;
				}
				else
				{
					this._Test_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test_Name");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_ph")]
public partial class Order_ph : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Order_ID;
	
	private System.Nullable<int> _Product_ID;
	
	private string _Store_ID;
	
	private System.Nullable<int> _Qunantity;
	
	private System.Nullable<System.DateTime> _Order_Date;
	
	private System.Nullable<int> _E_ID;
	
	private System.Nullable<int> _Patient_ID;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(int value);
    partial void OnOrder_IDChanged();
    partial void OnProduct_IDChanging(System.Nullable<int> value);
    partial void OnProduct_IDChanged();
    partial void OnStore_IDChanging(string value);
    partial void OnStore_IDChanged();
    partial void OnQunantityChanging(System.Nullable<int> value);
    partial void OnQunantityChanged();
    partial void OnOrder_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrder_DateChanged();
    partial void OnE_IDChanging(System.Nullable<int> value);
    partial void OnE_IDChanged();
    partial void OnPatient_IDChanging(System.Nullable<int> value);
    partial void OnPatient_IDChanged();
    #endregion
	
	public Order_ph()
	{
		this._Patient = default(EntityRef<Patient>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Order_ID
	{
		get
		{
			return this._Order_ID;
		}
		set
		{
			if ((this._Order_ID != value))
			{
				this.OnOrder_IDChanging(value);
				this.SendPropertyChanging();
				this._Order_ID = value;
				this.SendPropertyChanged("Order_ID");
				this.OnOrder_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int")]
	public System.Nullable<int> Product_ID
	{
		get
		{
			return this._Product_ID;
		}
		set
		{
			if ((this._Product_ID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProduct_IDChanging(value);
				this.SendPropertyChanging();
				this._Product_ID = value;
				this.SendPropertyChanged("Product_ID");
				this.OnProduct_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_ID", DbType="NVarChar(10)")]
	public string Store_ID
	{
		get
		{
			return this._Store_ID;
		}
		set
		{
			if ((this._Store_ID != value))
			{
				this.OnStore_IDChanging(value);
				this.SendPropertyChanging();
				this._Store_ID = value;
				this.SendPropertyChanged("Store_ID");
				this.OnStore_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qunantity", DbType="Int")]
	public System.Nullable<int> Qunantity
	{
		get
		{
			return this._Qunantity;
		}
		set
		{
			if ((this._Qunantity != value))
			{
				this.OnQunantityChanging(value);
				this.SendPropertyChanging();
				this._Qunantity = value;
				this.SendPropertyChanged("Qunantity");
				this.OnQunantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Order_Date
	{
		get
		{
			return this._Order_Date;
		}
		set
		{
			if ((this._Order_Date != value))
			{
				this.OnOrder_DateChanging(value);
				this.SendPropertyChanging();
				this._Order_Date = value;
				this.SendPropertyChanged("Order_Date");
				this.OnOrder_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_ID", DbType="Int")]
	public System.Nullable<int> E_ID
	{
		get
		{
			return this._E_ID;
		}
		set
		{
			if ((this._E_ID != value))
			{
				this.OnE_IDChanging(value);
				this.SendPropertyChanging();
				this._E_ID = value;
				this.SendPropertyChanged("E_ID");
				this.OnE_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int")]
	public System.Nullable<int> Patient_ID
	{
		get
		{
			return this._Patient_ID;
		}
		set
		{
			if ((this._Patient_ID != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatient_IDChanging(value);
				this.SendPropertyChanging();
				this._Patient_ID = value;
				this.SendPropertyChanged("Patient_ID");
				this.OnPatient_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Order_ph", Storage="_Patient", ThisKey="Patient_ID", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Order_phs.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Order_phs.Add(this);
					this._Patient_ID = value.ID_Patient;
				}
				else
				{
					this._Patient_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_ph", Storage="_Product", ThisKey="Product_ID", OtherKey="Product_ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Order_phs.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Order_phs.Add(this);
					this._Product_ID = value.Product_ID;
				}
				else
				{
					this._Product_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Patient;
	
	private string _P_NAME;
	
	private string _P_FATHER_NAME;
	
	private string _P_SARNAME;
	
	private string _P_MOTHER_NAME___TITLE;
	
	private string _P_PLACE_OF_BIRTH;
	
	private System.DateTime _P_DATE_OF_BIRTH_;
	
	private string _AGE;
	
	private string _ADDESS;
	
	private string _PHONE;
	
	private string _MOBILE_PHONE;
	
	private string _MARITAL_SATUS;
	
	private string _SECRETARIAT;
	
	private string _Constraint;
	
	private System.Nullable<System.DateTime> _DATE_OF_THE_GRANT_ID_CARD;
	
	private string _NOTIONAL_NO;
	
	private string _GENDER;
	
	private string _Blood_Group;
	
	private string _p_status;
	
	private EntitySet<Adm> _Adms;
	
	private EntitySet<Log_Room> _Log_Rooms;
	
	private EntitySet<Order> _Orders;
	
	private EntitySet<Order_ph> _Order_phs;
	
	private EntitySet<Payment> _Payments;
	
	private EntitySet<Ser> _Sers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PatientChanging(int value);
    partial void OnID_PatientChanged();
    partial void OnP_NAMEChanging(string value);
    partial void OnP_NAMEChanged();
    partial void OnP_FATHER_NAMEChanging(string value);
    partial void OnP_FATHER_NAMEChanged();
    partial void OnP_SARNAMEChanging(string value);
    partial void OnP_SARNAMEChanged();
    partial void OnP_MOTHER_NAME___TITLEChanging(string value);
    partial void OnP_MOTHER_NAME___TITLEChanged();
    partial void OnP_PLACE_OF_BIRTHChanging(string value);
    partial void OnP_PLACE_OF_BIRTHChanged();
    partial void OnP_DATE_OF_BIRTH_Changing(System.DateTime value);
    partial void OnP_DATE_OF_BIRTH_Changed();
    partial void OnAGEChanging(string value);
    partial void OnAGEChanged();
    partial void OnADDESSChanging(string value);
    partial void OnADDESSChanged();
    partial void OnPHONEChanging(string value);
    partial void OnPHONEChanged();
    partial void OnMOBILE_PHONEChanging(string value);
    partial void OnMOBILE_PHONEChanged();
    partial void OnMARITAL_SATUSChanging(string value);
    partial void OnMARITAL_SATUSChanged();
    partial void OnSECRETARIATChanging(string value);
    partial void OnSECRETARIATChanged();
    partial void OnConstraintChanging(string value);
    partial void OnConstraintChanged();
    partial void OnDATE_OF_THE_GRANT_ID_CARDChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_OF_THE_GRANT_ID_CARDChanged();
    partial void OnNOTIONAL_NOChanging(string value);
    partial void OnNOTIONAL_NOChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnBlood_GroupChanging(string value);
    partial void OnBlood_GroupChanged();
    partial void Onp_statusChanging(string value);
    partial void Onp_statusChanged();
    #endregion
	
	public Patient()
	{
		this._Adms = new EntitySet<Adm>(new Action<Adm>(this.attach_Adms), new Action<Adm>(this.detach_Adms));
		this._Log_Rooms = new EntitySet<Log_Room>(new Action<Log_Room>(this.attach_Log_Rooms), new Action<Log_Room>(this.detach_Log_Rooms));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Order_phs = new EntitySet<Order_ph>(new Action<Order_ph>(this.attach_Order_phs), new Action<Order_ph>(this.detach_Order_phs));
		this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
		this._Sers = new EntitySet<Ser>(new Action<Ser>(this.attach_Sers), new Action<Ser>(this.detach_Sers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Patient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Patient
	{
		get
		{
			return this._ID_Patient;
		}
		set
		{
			if ((this._ID_Patient != value))
			{
				this.OnID_PatientChanging(value);
				this.SendPropertyChanging();
				this._ID_Patient = value;
				this.SendPropertyChanged("ID_Patient");
				this.OnID_PatientChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string P_NAME
	{
		get
		{
			return this._P_NAME;
		}
		set
		{
			if ((this._P_NAME != value))
			{
				this.OnP_NAMEChanging(value);
				this.SendPropertyChanging();
				this._P_NAME = value;
				this.SendPropertyChanged("P_NAME");
				this.OnP_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_FATHER_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string P_FATHER_NAME
	{
		get
		{
			return this._P_FATHER_NAME;
		}
		set
		{
			if ((this._P_FATHER_NAME != value))
			{
				this.OnP_FATHER_NAMEChanging(value);
				this.SendPropertyChanging();
				this._P_FATHER_NAME = value;
				this.SendPropertyChanged("P_FATHER_NAME");
				this.OnP_FATHER_NAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_SARNAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string P_SARNAME
	{
		get
		{
			return this._P_SARNAME;
		}
		set
		{
			if ((this._P_SARNAME != value))
			{
				this.OnP_SARNAMEChanging(value);
				this.SendPropertyChanging();
				this._P_SARNAME = value;
				this.SendPropertyChanged("P_SARNAME");
				this.OnP_SARNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[P_MOTHER_NAME[&]]TITLE]", Storage="_P_MOTHER_NAME___TITLE", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string P_MOTHER_NAME___TITLE
	{
		get
		{
			return this._P_MOTHER_NAME___TITLE;
		}
		set
		{
			if ((this._P_MOTHER_NAME___TITLE != value))
			{
				this.OnP_MOTHER_NAME___TITLEChanging(value);
				this.SendPropertyChanging();
				this._P_MOTHER_NAME___TITLE = value;
				this.SendPropertyChanged("P_MOTHER_NAME___TITLE");
				this.OnP_MOTHER_NAME___TITLEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_PLACE_OF_BIRTH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string P_PLACE_OF_BIRTH
	{
		get
		{
			return this._P_PLACE_OF_BIRTH;
		}
		set
		{
			if ((this._P_PLACE_OF_BIRTH != value))
			{
				this.OnP_PLACE_OF_BIRTHChanging(value);
				this.SendPropertyChanging();
				this._P_PLACE_OF_BIRTH = value;
				this.SendPropertyChanged("P_PLACE_OF_BIRTH");
				this.OnP_PLACE_OF_BIRTHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[P_DATE_OF_BIRTH,]", Storage="_P_DATE_OF_BIRTH_", DbType="DateTime NOT NULL")]
	public System.DateTime P_DATE_OF_BIRTH_
	{
		get
		{
			return this._P_DATE_OF_BIRTH_;
		}
		set
		{
			if ((this._P_DATE_OF_BIRTH_ != value))
			{
				this.OnP_DATE_OF_BIRTH_Changing(value);
				this.SendPropertyChanging();
				this._P_DATE_OF_BIRTH_ = value;
				this.SendPropertyChanged("P_DATE_OF_BIRTH_");
				this.OnP_DATE_OF_BIRTH_Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AGE", DbType="NVarChar(100)")]
	public string AGE
	{
		get
		{
			return this._AGE;
		}
		set
		{
			if ((this._AGE != value))
			{
				this.OnAGEChanging(value);
				this.SendPropertyChanging();
				this._AGE = value;
				this.SendPropertyChanged("AGE");
				this.OnAGEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDESS", DbType="NVarChar(1000)")]
	public string ADDESS
	{
		get
		{
			return this._ADDESS;
		}
		set
		{
			if ((this._ADDESS != value))
			{
				this.OnADDESSChanging(value);
				this.SendPropertyChanging();
				this._ADDESS = value;
				this.SendPropertyChanged("ADDESS");
				this.OnADDESSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE", DbType="NVarChar(20)")]
	public string PHONE
	{
		get
		{
			return this._PHONE;
		}
		set
		{
			if ((this._PHONE != value))
			{
				this.OnPHONEChanging(value);
				this.SendPropertyChanging();
				this._PHONE = value;
				this.SendPropertyChanged("PHONE");
				this.OnPHONEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOBILE_PHONE", DbType="NVarChar(20)")]
	public string MOBILE_PHONE
	{
		get
		{
			return this._MOBILE_PHONE;
		}
		set
		{
			if ((this._MOBILE_PHONE != value))
			{
				this.OnMOBILE_PHONEChanging(value);
				this.SendPropertyChanging();
				this._MOBILE_PHONE = value;
				this.SendPropertyChanged("MOBILE_PHONE");
				this.OnMOBILE_PHONEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MARITAL_SATUS", DbType="NVarChar(10)")]
	public string MARITAL_SATUS
	{
		get
		{
			return this._MARITAL_SATUS;
		}
		set
		{
			if ((this._MARITAL_SATUS != value))
			{
				this.OnMARITAL_SATUSChanging(value);
				this.SendPropertyChanging();
				this._MARITAL_SATUS = value;
				this.SendPropertyChanged("MARITAL_SATUS");
				this.OnMARITAL_SATUSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SECRETARIAT", DbType="NVarChar(50)")]
	public string SECRETARIAT
	{
		get
		{
			return this._SECRETARIAT;
		}
		set
		{
			if ((this._SECRETARIAT != value))
			{
				this.OnSECRETARIATChanging(value);
				this.SendPropertyChanging();
				this._SECRETARIAT = value;
				this.SendPropertyChanged("SECRETARIAT");
				this.OnSECRETARIATChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Constraint]", Storage="_Constraint", DbType="NVarChar(50)")]
	public string Constraint
	{
		get
		{
			return this._Constraint;
		}
		set
		{
			if ((this._Constraint != value))
			{
				this.OnConstraintChanging(value);
				this.SendPropertyChanging();
				this._Constraint = value;
				this.SendPropertyChanged("Constraint");
				this.OnConstraintChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_OF_THE_GRANT_ID_CARD", DbType="Date")]
	public System.Nullable<System.DateTime> DATE_OF_THE_GRANT_ID_CARD
	{
		get
		{
			return this._DATE_OF_THE_GRANT_ID_CARD;
		}
		set
		{
			if ((this._DATE_OF_THE_GRANT_ID_CARD != value))
			{
				this.OnDATE_OF_THE_GRANT_ID_CARDChanging(value);
				this.SendPropertyChanging();
				this._DATE_OF_THE_GRANT_ID_CARD = value;
				this.SendPropertyChanged("DATE_OF_THE_GRANT_ID_CARD");
				this.OnDATE_OF_THE_GRANT_ID_CARDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOTIONAL_NO", DbType="NVarChar(30)")]
	public string NOTIONAL_NO
	{
		get
		{
			return this._NOTIONAL_NO;
		}
		set
		{
			if ((this._NOTIONAL_NO != value))
			{
				this.OnNOTIONAL_NOChanging(value);
				this.SendPropertyChanging();
				this._NOTIONAL_NO = value;
				this.SendPropertyChanged("NOTIONAL_NO");
				this.OnNOTIONAL_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string GENDER
	{
		get
		{
			return this._GENDER;
		}
		set
		{
			if ((this._GENDER != value))
			{
				this.OnGENDERChanging(value);
				this.SendPropertyChanging();
				this._GENDER = value;
				this.SendPropertyChanged("GENDER");
				this.OnGENDERChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blood_Group", DbType="NVarChar(10)")]
	public string Blood_Group
	{
		get
		{
			return this._Blood_Group;
		}
		set
		{
			if ((this._Blood_Group != value))
			{
				this.OnBlood_GroupChanging(value);
				this.SendPropertyChanging();
				this._Blood_Group = value;
				this.SendPropertyChanged("Blood_Group");
				this.OnBlood_GroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_p_status", DbType="NVarChar(50)")]
	public string p_status
	{
		get
		{
			return this._p_status;
		}
		set
		{
			if ((this._p_status != value))
			{
				this.Onp_statusChanging(value);
				this.SendPropertyChanging();
				this._p_status = value;
				this.SendPropertyChanged("p_status");
				this.Onp_statusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Adm", Storage="_Adms", ThisKey="ID_Patient", OtherKey="Patient_Id")]
	public EntitySet<Adm> Adms
	{
		get
		{
			return this._Adms;
		}
		set
		{
			this._Adms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Log_Room", Storage="_Log_Rooms", ThisKey="ID_Patient", OtherKey="Patient_ID")]
	public EntitySet<Log_Room> Log_Rooms
	{
		get
		{
			return this._Log_Rooms;
		}
		set
		{
			this._Log_Rooms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Order", Storage="_Orders", ThisKey="ID_Patient", OtherKey="P_ID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Order_ph", Storage="_Order_phs", ThisKey="ID_Patient", OtherKey="Patient_ID")]
	public EntitySet<Order_ph> Order_phs
	{
		get
		{
			return this._Order_phs;
		}
		set
		{
			this._Order_phs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Payment", Storage="_Payments", ThisKey="ID_Patient", OtherKey="patient_id")]
	public EntitySet<Payment> Payments
	{
		get
		{
			return this._Payments;
		}
		set
		{
			this._Payments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Ser", Storage="_Sers", ThisKey="ID_Patient", OtherKey="Patient_ID")]
	public EntitySet<Ser> Sers
	{
		get
		{
			return this._Sers;
		}
		set
		{
			this._Sers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_Log_Rooms(Log_Room entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Log_Rooms(Log_Room entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_Order_phs(Order_ph entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Order_phs(Order_ph entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_Payments(Payment entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Payments(Payment entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_Sers(Ser entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Sers(Ser entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _pay_id;
	
	private System.Nullable<int> _patient_id;
	
	private System.Nullable<double> _Room_Cost;
	
	private System.Nullable<double> _Lab_Cost;
	
	private System.Nullable<double> _ph_Cost;
	
	private EntityRef<Patient> _Patient;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpay_idChanging(int value);
    partial void Onpay_idChanged();
    partial void Onpatient_idChanging(System.Nullable<int> value);
    partial void Onpatient_idChanged();
    partial void OnRoom_CostChanging(System.Nullable<double> value);
    partial void OnRoom_CostChanged();
    partial void OnLab_CostChanging(System.Nullable<double> value);
    partial void OnLab_CostChanged();
    partial void Onph_CostChanging(System.Nullable<double> value);
    partial void Onph_CostChanged();
    #endregion
	
	public Payment()
	{
		this._Patient = default(EntityRef<Patient>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pay_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int pay_id
	{
		get
		{
			return this._pay_id;
		}
		set
		{
			if ((this._pay_id != value))
			{
				this.Onpay_idChanging(value);
				this.SendPropertyChanging();
				this._pay_id = value;
				this.SendPropertyChanged("pay_id");
				this.Onpay_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_id", DbType="Int")]
	public System.Nullable<int> patient_id
	{
		get
		{
			return this._patient_id;
		}
		set
		{
			if ((this._patient_id != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onpatient_idChanging(value);
				this.SendPropertyChanging();
				this._patient_id = value;
				this.SendPropertyChanged("patient_id");
				this.Onpatient_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Cost", DbType="Float")]
	public System.Nullable<double> Room_Cost
	{
		get
		{
			return this._Room_Cost;
		}
		set
		{
			if ((this._Room_Cost != value))
			{
				this.OnRoom_CostChanging(value);
				this.SendPropertyChanging();
				this._Room_Cost = value;
				this.SendPropertyChanged("Room_Cost");
				this.OnRoom_CostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lab_Cost", DbType="Float")]
	public System.Nullable<double> Lab_Cost
	{
		get
		{
			return this._Lab_Cost;
		}
		set
		{
			if ((this._Lab_Cost != value))
			{
				this.OnLab_CostChanging(value);
				this.SendPropertyChanging();
				this._Lab_Cost = value;
				this.SendPropertyChanged("Lab_Cost");
				this.OnLab_CostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ph_Cost", DbType="Float")]
	public System.Nullable<double> ph_Cost
	{
		get
		{
			return this._ph_Cost;
		}
		set
		{
			if ((this._ph_Cost != value))
			{
				this.Onph_CostChanging(value);
				this.SendPropertyChanging();
				this._ph_Cost = value;
				this.SendPropertyChanged("ph_Cost");
				this.Onph_CostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Payment", Storage="_Patient", ThisKey="patient_id", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Payments.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Payments.Add(this);
					this._patient_id = value.ID_Patient;
				}
				else
				{
					this._patient_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pharmacy_Vendors")]
public partial class Pharmacy_Vendor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Vendor_ID;
	
	private string _Vendor_Name;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Fax;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendor_IDChanging(string value);
    partial void OnVendor_IDChanged();
    partial void OnVendor_NameChanging(string value);
    partial void OnVendor_NameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    #endregion
	
	public Pharmacy_Vendor()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vendor_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Vendor_ID
	{
		get
		{
			return this._Vendor_ID;
		}
		set
		{
			if ((this._Vendor_ID != value))
			{
				this.OnVendor_IDChanging(value);
				this.SendPropertyChanging();
				this._Vendor_ID = value;
				this.SendPropertyChanged("Vendor_ID");
				this.OnVendor_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vendor_Name", DbType="NVarChar(50)")]
	public string Vendor_Name
	{
		get
		{
			return this._Vendor_Name;
		}
		set
		{
			if ((this._Vendor_Name != value))
			{
				this.OnVendor_NameChanging(value);
				this.SendPropertyChanging();
				this._Vendor_Name = value;
				this.SendPropertyChanged("Vendor_Name");
				this.OnVendor_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(20)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacy_Vendor_Product", Storage="_Products", ThisKey="Vendor_ID", OtherKey="Vendor_ID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Pharmacy_Vendor = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Pharmacy_Vendor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Product_ID;
	
	private string _Product__Code;
	
	private string _Product__Name;
	
	private System.Nullable<double> _Unit_Cost;
	
	private string _Description;
	
	private string _category_ID;
	
	private string _Vendor_ID;
	
	private string _id_form;
	
	private EntitySet<Order_ph> _Order_phs;
	
	private EntitySet<Product_Detail> _Product_Details;
	
	private EntityRef<form_drug> _form_drug;
	
	private EntityRef<Pharmacy_Vendor> _Pharmacy_Vendor;
	
	private EntityRef<Product_Category> _Product_Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnProduct__CodeChanging(string value);
    partial void OnProduct__CodeChanged();
    partial void OnProduct__NameChanging(string value);
    partial void OnProduct__NameChanged();
    partial void OnUnit_CostChanging(System.Nullable<double> value);
    partial void OnUnit_CostChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void Oncategory_IDChanging(string value);
    partial void Oncategory_IDChanged();
    partial void OnVendor_IDChanging(string value);
    partial void OnVendor_IDChanged();
    partial void Onid_formChanging(string value);
    partial void Onid_formChanged();
    #endregion
	
	public Product()
	{
		this._Order_phs = new EntitySet<Order_ph>(new Action<Order_ph>(this.attach_Order_phs), new Action<Order_ph>(this.detach_Order_phs));
		this._Product_Details = new EntitySet<Product_Detail>(new Action<Product_Detail>(this.attach_Product_Details), new Action<Product_Detail>(this.detach_Product_Details));
		this._form_drug = default(EntityRef<form_drug>);
		this._Pharmacy_Vendor = default(EntityRef<Pharmacy_Vendor>);
		this._Product_Category = default(EntityRef<Product_Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Product_ID
	{
		get
		{
			return this._Product_ID;
		}
		set
		{
			if ((this._Product_ID != value))
			{
				this.OnProduct_IDChanging(value);
				this.SendPropertyChanging();
				this._Product_ID = value;
				this.SendPropertyChanged("Product_ID");
				this.OnProduct_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Product_ Code]", Storage="_Product__Code", AutoSync=AutoSync.Always, DbType="VarChar(10)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public string Product__Code
	{
		get
		{
			return this._Product__Code;
		}
		set
		{
			if ((this._Product__Code != value))
			{
				this.OnProduct__CodeChanging(value);
				this.SendPropertyChanging();
				this._Product__Code = value;
				this.SendPropertyChanged("Product__Code");
				this.OnProduct__CodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Product_ Name]", Storage="_Product__Name", DbType="NVarChar(1000)")]
	public string Product__Name
	{
		get
		{
			return this._Product__Name;
		}
		set
		{
			if ((this._Product__Name != value))
			{
				this.OnProduct__NameChanging(value);
				this.SendPropertyChanging();
				this._Product__Name = value;
				this.SendPropertyChanged("Product__Name");
				this.OnProduct__NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Cost", DbType="Float")]
	public System.Nullable<double> Unit_Cost
	{
		get
		{
			return this._Unit_Cost;
		}
		set
		{
			if ((this._Unit_Cost != value))
			{
				this.OnUnit_CostChanging(value);
				this.SendPropertyChanging();
				this._Unit_Cost = value;
				this.SendPropertyChanged("Unit_Cost");
				this.OnUnit_CostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_ID", DbType="NVarChar(10)")]
	public string category_ID
	{
		get
		{
			return this._category_ID;
		}
		set
		{
			if ((this._category_ID != value))
			{
				if (this._Product_Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncategory_IDChanging(value);
				this.SendPropertyChanging();
				this._category_ID = value;
				this.SendPropertyChanged("category_ID");
				this.Oncategory_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vendor_ID", DbType="NVarChar(10)")]
	public string Vendor_ID
	{
		get
		{
			return this._Vendor_ID;
		}
		set
		{
			if ((this._Vendor_ID != value))
			{
				if (this._Pharmacy_Vendor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVendor_IDChanging(value);
				this.SendPropertyChanging();
				this._Vendor_ID = value;
				this.SendPropertyChanged("Vendor_ID");
				this.OnVendor_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_form", DbType="NVarChar(10)")]
	public string id_form
	{
		get
		{
			return this._id_form;
		}
		set
		{
			if ((this._id_form != value))
			{
				if (this._form_drug.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onid_formChanging(value);
				this.SendPropertyChanging();
				this._id_form = value;
				this.SendPropertyChanged("id_form");
				this.Onid_formChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_ph", Storage="_Order_phs", ThisKey="Product_ID", OtherKey="Product_ID")]
	public EntitySet<Order_ph> Order_phs
	{
		get
		{
			return this._Order_phs;
		}
		set
		{
			this._Order_phs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Detail", Storage="_Product_Details", ThisKey="Product_ID", OtherKey="Product_ID")]
	public EntitySet<Product_Detail> Product_Details
	{
		get
		{
			return this._Product_Details;
		}
		set
		{
			this._Product_Details.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="form_drug_Product", Storage="_form_drug", ThisKey="id_form", OtherKey="F_ID", IsForeignKey=true)]
	public form_drug form_drug
	{
		get
		{
			return this._form_drug.Entity;
		}
		set
		{
			form_drug previousValue = this._form_drug.Entity;
			if (((previousValue != value) 
						|| (this._form_drug.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._form_drug.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._form_drug.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._id_form = value.F_ID;
				}
				else
				{
					this._id_form = default(string);
				}
				this.SendPropertyChanged("form_drug");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacy_Vendor_Product", Storage="_Pharmacy_Vendor", ThisKey="Vendor_ID", OtherKey="Vendor_ID", IsForeignKey=true)]
	public Pharmacy_Vendor Pharmacy_Vendor
	{
		get
		{
			return this._Pharmacy_Vendor.Entity;
		}
		set
		{
			Pharmacy_Vendor previousValue = this._Pharmacy_Vendor.Entity;
			if (((previousValue != value) 
						|| (this._Pharmacy_Vendor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pharmacy_Vendor.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Pharmacy_Vendor.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._Vendor_ID = value.Vendor_ID;
				}
				else
				{
					this._Vendor_ID = default(string);
				}
				this.SendPropertyChanged("Pharmacy_Vendor");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Category_Product", Storage="_Product_Category", ThisKey="category_ID", OtherKey="cate_ID", IsForeignKey=true)]
	public Product_Category Product_Category
	{
		get
		{
			return this._Product_Category.Entity;
		}
		set
		{
			Product_Category previousValue = this._Product_Category.Entity;
			if (((previousValue != value) 
						|| (this._Product_Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product_Category.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Product_Category.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._category_ID = value.cate_ID;
				}
				else
				{
					this._category_ID = default(string);
				}
				this.SendPropertyChanged("Product_Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Order_phs(Order_ph entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Order_phs(Order_ph entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_Product_Details(Product_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Product_Details(Product_Detail entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Categories")]
public partial class Product_Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _cate_ID;
	
	private string _Cate_Name;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncate_IDChanging(string value);
    partial void Oncate_IDChanged();
    partial void OnCate_NameChanging(string value);
    partial void OnCate_NameChanged();
    #endregion
	
	public Product_Category()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cate_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string cate_ID
	{
		get
		{
			return this._cate_ID;
		}
		set
		{
			if ((this._cate_ID != value))
			{
				this.Oncate_IDChanging(value);
				this.SendPropertyChanging();
				this._cate_ID = value;
				this.SendPropertyChanged("cate_ID");
				this.Oncate_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cate_Name", DbType="NVarChar(50)")]
	public string Cate_Name
	{
		get
		{
			return this._Cate_Name;
		}
		set
		{
			if ((this._Cate_Name != value))
			{
				this.OnCate_NameChanging(value);
				this.SendPropertyChanging();
				this._Cate_Name = value;
				this.SendPropertyChanged("Cate_Name");
				this.OnCate_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Category_Product", Storage="_Products", ThisKey="cate_ID", OtherKey="category_ID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Product_Category = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Product_Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Detail")]
public partial class Product_Detail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Nullable<int> _Product_ID;
	
	private int _Batch__Number;
	
	private System.Nullable<System.DateTime> _Product_start_date;
	
	private System.Nullable<System.DateTime> _Product_end_date;
	
	private System.Nullable<int> _Qunttity;
	
	private string _Note;
	
	private System.Nullable<int> _Using;
	
	private System.Nullable<System.DateTime> _Betch_Date;
	
	private EntitySet<Item_Store> _Item_Stores;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(System.Nullable<int> value);
    partial void OnProduct_IDChanged();
    partial void OnBatch__NumberChanging(int value);
    partial void OnBatch__NumberChanged();
    partial void OnProduct_start_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnProduct_start_dateChanged();
    partial void OnProduct_end_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnProduct_end_dateChanged();
    partial void OnQunttityChanging(System.Nullable<int> value);
    partial void OnQunttityChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnUsingChanging(System.Nullable<int> value);
    partial void OnUsingChanged();
    partial void OnBetch_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBetch_DateChanged();
    #endregion
	
	public Product_Detail()
	{
		this._Item_Stores = new EntitySet<Item_Store>(new Action<Item_Store>(this.attach_Item_Stores), new Action<Item_Store>(this.detach_Item_Stores));
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int")]
	public System.Nullable<int> Product_ID
	{
		get
		{
			return this._Product_ID;
		}
		set
		{
			if ((this._Product_ID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProduct_IDChanging(value);
				this.SendPropertyChanging();
				this._Product_ID = value;
				this.SendPropertyChanged("Product_ID");
				this.OnProduct_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Batch_ Number]", Storage="_Batch__Number", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Batch__Number
	{
		get
		{
			return this._Batch__Number;
		}
		set
		{
			if ((this._Batch__Number != value))
			{
				this.OnBatch__NumberChanging(value);
				this.SendPropertyChanging();
				this._Batch__Number = value;
				this.SendPropertyChanged("Batch__Number");
				this.OnBatch__NumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_start_date", DbType="Date")]
	public System.Nullable<System.DateTime> Product_start_date
	{
		get
		{
			return this._Product_start_date;
		}
		set
		{
			if ((this._Product_start_date != value))
			{
				this.OnProduct_start_dateChanging(value);
				this.SendPropertyChanging();
				this._Product_start_date = value;
				this.SendPropertyChanged("Product_start_date");
				this.OnProduct_start_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_end_date", DbType="Date")]
	public System.Nullable<System.DateTime> Product_end_date
	{
		get
		{
			return this._Product_end_date;
		}
		set
		{
			if ((this._Product_end_date != value))
			{
				this.OnProduct_end_dateChanging(value);
				this.SendPropertyChanging();
				this._Product_end_date = value;
				this.SendPropertyChanged("Product_end_date");
				this.OnProduct_end_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qunttity", DbType="Int")]
	public System.Nullable<int> Qunttity
	{
		get
		{
			return this._Qunttity;
		}
		set
		{
			if ((this._Qunttity != value))
			{
				this.OnQunttityChanging(value);
				this.SendPropertyChanging();
				this._Qunttity = value;
				this.SendPropertyChanged("Qunttity");
				this.OnQunttityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Using", DbType="Int")]
	public System.Nullable<int> Using
	{
		get
		{
			return this._Using;
		}
		set
		{
			if ((this._Using != value))
			{
				this.OnUsingChanging(value);
				this.SendPropertyChanging();
				this._Using = value;
				this.SendPropertyChanged("Using");
				this.OnUsingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Betch_Date", DbType="Date")]
	public System.Nullable<System.DateTime> Betch_Date
	{
		get
		{
			return this._Betch_Date;
		}
		set
		{
			if ((this._Betch_Date != value))
			{
				this.OnBetch_DateChanging(value);
				this.SendPropertyChanging();
				this._Betch_Date = value;
				this.SendPropertyChanged("Betch_Date");
				this.OnBetch_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail_Item_Store", Storage="_Item_Stores", ThisKey="Batch__Number", OtherKey="betch_ID")]
	public EntitySet<Item_Store> Item_Stores
	{
		get
		{
			return this._Item_Stores;
		}
		set
		{
			this._Item_Stores.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Detail", Storage="_Product", ThisKey="Product_ID", OtherKey="Product_ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Product_Details.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Product_Details.Add(this);
					this._Product_ID = value.Product_ID;
				}
				else
				{
					this._Product_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Item_Stores(Item_Store entity)
	{
		this.SendPropertyChanging();
		entity.Product_Detail = this;
	}
	
	private void detach_Item_Stores(Item_Store entity)
	{
		this.SendPropertyChanging();
		entity.Product_Detail = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Room_No_;
	
	private string _Room_Type;
	
	private decimal _Room_Cost;
	
	private int _Length_OF_Stay;
	
	private byte _Floor;
	
	private System.Nullable<byte> _Bad_No_;
	
	private string _Room_Status;
	
	private EntitySet<Adm> _Adms;
	
	private EntitySet<Log_Room> _Log_Rooms;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoom_No_Changing(int value);
    partial void OnRoom_No_Changed();
    partial void OnRoom_TypeChanging(string value);
    partial void OnRoom_TypeChanged();
    partial void OnRoom_CostChanging(decimal value);
    partial void OnRoom_CostChanged();
    partial void OnLength_OF_StayChanging(int value);
    partial void OnLength_OF_StayChanged();
    partial void OnFloorChanging(byte value);
    partial void OnFloorChanged();
    partial void OnBad_No_Changing(System.Nullable<byte> value);
    partial void OnBad_No_Changed();
    partial void OnRoom_StatusChanging(string value);
    partial void OnRoom_StatusChanged();
    #endregion
	
	public Room()
	{
		this._Adms = new EntitySet<Adm>(new Action<Adm>(this.attach_Adms), new Action<Adm>(this.detach_Adms));
		this._Log_Rooms = new EntitySet<Log_Room>(new Action<Log_Room>(this.attach_Log_Rooms), new Action<Log_Room>(this.detach_Log_Rooms));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Room No.]", Storage="_Room_No_", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Room_No_
	{
		get
		{
			return this._Room_No_;
		}
		set
		{
			if ((this._Room_No_ != value))
			{
				this.OnRoom_No_Changing(value);
				this.SendPropertyChanging();
				this._Room_No_ = value;
				this.SendPropertyChanged("Room_No_");
				this.OnRoom_No_Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Type", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Room_Type
	{
		get
		{
			return this._Room_Type;
		}
		set
		{
			if ((this._Room_Type != value))
			{
				this.OnRoom_TypeChanging(value);
				this.SendPropertyChanging();
				this._Room_Type = value;
				this.SendPropertyChanged("Room_Type");
				this.OnRoom_TypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Cost", DbType="SmallMoney NOT NULL")]
	public decimal Room_Cost
	{
		get
		{
			return this._Room_Cost;
		}
		set
		{
			if ((this._Room_Cost != value))
			{
				this.OnRoom_CostChanging(value);
				this.SendPropertyChanging();
				this._Room_Cost = value;
				this.SendPropertyChanged("Room_Cost");
				this.OnRoom_CostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Length OF Stay]", Storage="_Length_OF_Stay", DbType="Int NOT NULL")]
	public int Length_OF_Stay
	{
		get
		{
			return this._Length_OF_Stay;
		}
		set
		{
			if ((this._Length_OF_Stay != value))
			{
				this.OnLength_OF_StayChanging(value);
				this.SendPropertyChanging();
				this._Length_OF_Stay = value;
				this.SendPropertyChanged("Length_OF_Stay");
				this.OnLength_OF_StayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="TinyInt NOT NULL")]
	public byte Floor
	{
		get
		{
			return this._Floor;
		}
		set
		{
			if ((this._Floor != value))
			{
				this.OnFloorChanging(value);
				this.SendPropertyChanging();
				this._Floor = value;
				this.SendPropertyChanged("Floor");
				this.OnFloorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Bad No.]", Storage="_Bad_No_", DbType="TinyInt")]
	public System.Nullable<byte> Bad_No_
	{
		get
		{
			return this._Bad_No_;
		}
		set
		{
			if ((this._Bad_No_ != value))
			{
				this.OnBad_No_Changing(value);
				this.SendPropertyChanging();
				this._Bad_No_ = value;
				this.SendPropertyChanged("Bad_No_");
				this.OnBad_No_Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Status", DbType="NVarChar(50)")]
	public string Room_Status
	{
		get
		{
			return this._Room_Status;
		}
		set
		{
			if ((this._Room_Status != value))
			{
				this.OnRoom_StatusChanging(value);
				this.SendPropertyChanging();
				this._Room_Status = value;
				this.SendPropertyChanged("Room_Status");
				this.OnRoom_StatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Adm", Storage="_Adms", ThisKey="Room_No_", OtherKey="Room_No_")]
	public EntitySet<Adm> Adms
	{
		get
		{
			return this._Adms;
		}
		set
		{
			this._Adms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Log_Room", Storage="_Log_Rooms", ThisKey="Room_No_", OtherKey="Room_NO")]
	public EntitySet<Log_Room> Log_Rooms
	{
		get
		{
			return this._Log_Rooms;
		}
		set
		{
			this._Log_Rooms.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Room = this;
	}
	
	private void detach_Adms(Adm entity)
	{
		this.SendPropertyChanging();
		entity.Room = null;
	}
	
	private void attach_Log_Rooms(Log_Room entity)
	{
		this.SendPropertyChanging();
		entity.Room = this;
	}
	
	private void detach_Log_Rooms(Log_Room entity)
	{
		this.SendPropertyChanging();
		entity.Room = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Test Names]")]
public partial class Test_Name : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID_Test_Catego;
	
	private int _ID_Test;
	
	private string _Test_Name1;
	
	private System.Nullable<double> _No_Unit;
	
	private EntitySet<Order> _Orders;
	
	private EntitySet<Ser> _Sers;
	
	private EntityRef<Test_Category> _Test_Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Test_CategoChanging(byte value);
    partial void OnID_Test_CategoChanged();
    partial void OnID_TestChanging(int value);
    partial void OnID_TestChanged();
    partial void OnTest_Name1Changing(string value);
    partial void OnTest_Name1Changed();
    partial void OnNo_UnitChanging(System.Nullable<double> value);
    partial void OnNo_UnitChanged();
    #endregion
	
	public Test_Name()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Sers = new EntitySet<Ser>(new Action<Ser>(this.attach_Sers), new Action<Ser>(this.detach_Sers));
		this._Test_Category = default(EntityRef<Test_Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Test_Catego", DbType="TinyInt NOT NULL")]
	public byte ID_Test_Catego
	{
		get
		{
			return this._ID_Test_Catego;
		}
		set
		{
			if ((this._ID_Test_Catego != value))
			{
				if (this._Test_Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_Test_CategoChanging(value);
				this.SendPropertyChanging();
				this._ID_Test_Catego = value;
				this.SendPropertyChanged("ID_Test_Catego");
				this.OnID_Test_CategoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Test", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Test
	{
		get
		{
			return this._ID_Test;
		}
		set
		{
			if ((this._ID_Test != value))
			{
				this.OnID_TestChanging(value);
				this.SendPropertyChanging();
				this._ID_Test = value;
				this.SendPropertyChanged("ID_Test");
				this.OnID_TestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Test_Name", Storage="_Test_Name1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Test_Name1
	{
		get
		{
			return this._Test_Name1;
		}
		set
		{
			if ((this._Test_Name1 != value))
			{
				this.OnTest_Name1Changing(value);
				this.SendPropertyChanging();
				this._Test_Name1 = value;
				this.SendPropertyChanged("Test_Name1");
				this.OnTest_Name1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No_Unit", DbType="Float")]
	public System.Nullable<double> No_Unit
	{
		get
		{
			return this._No_Unit;
		}
		set
		{
			if ((this._No_Unit != value))
			{
				this.OnNo_UnitChanging(value);
				this.SendPropertyChanging();
				this._No_Unit = value;
				this.SendPropertyChanged("No_Unit");
				this.OnNo_UnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Name_Order", Storage="_Orders", ThisKey="ID_Test", OtherKey="Test_ID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Name_Ser", Storage="_Sers", ThisKey="ID_Test", OtherKey="Test_ID")]
	public EntitySet<Ser> Sers
	{
		get
		{
			return this._Sers;
		}
		set
		{
			this._Sers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Category_Test_Name", Storage="_Test_Category", ThisKey="ID_Test_Catego", OtherKey="ID_Test_Catego", IsForeignKey=true)]
	public Test_Category Test_Category
	{
		get
		{
			return this._Test_Category.Entity;
		}
		set
		{
			Test_Category previousValue = this._Test_Category.Entity;
			if (((previousValue != value) 
						|| (this._Test_Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Category.Entity = null;
					previousValue.Test_Names.Remove(this);
				}
				this._Test_Category.Entity = value;
				if ((value != null))
				{
					value.Test_Names.Add(this);
					this._ID_Test_Catego = value.ID_Test_Catego;
				}
				else
				{
					this._ID_Test_Catego = default(byte);
				}
				this.SendPropertyChanged("Test_Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Test_Name = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Test_Name = null;
	}
	
	private void attach_Sers(Ser entity)
	{
		this.SendPropertyChanging();
		entity.Test_Name = this;
	}
	
	private void detach_Sers(Ser entity)
	{
		this.SendPropertyChanging();
		entity.Test_Name = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Categories")]
public partial class Test_Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID_Test_Catego;
	
	private string _Name_Of_Catego;
	
	private EntitySet<Test_Name> _Test_Names;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Test_CategoChanging(byte value);
    partial void OnID_Test_CategoChanged();
    partial void OnName_Of_CategoChanging(string value);
    partial void OnName_Of_CategoChanged();
    #endregion
	
	public Test_Category()
	{
		this._Test_Names = new EntitySet<Test_Name>(new Action<Test_Name>(this.attach_Test_Names), new Action<Test_Name>(this.detach_Test_Names));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Test_Catego", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte ID_Test_Catego
	{
		get
		{
			return this._ID_Test_Catego;
		}
		set
		{
			if ((this._ID_Test_Catego != value))
			{
				this.OnID_Test_CategoChanging(value);
				this.SendPropertyChanging();
				this._ID_Test_Catego = value;
				this.SendPropertyChanged("ID_Test_Catego");
				this.OnID_Test_CategoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Of_Catego", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name_Of_Catego
	{
		get
		{
			return this._Name_Of_Catego;
		}
		set
		{
			if ((this._Name_Of_Catego != value))
			{
				this.OnName_Of_CategoChanging(value);
				this.SendPropertyChanging();
				this._Name_Of_Catego = value;
				this.SendPropertyChanged("Name_Of_Catego");
				this.OnName_Of_CategoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Category_Test_Name", Storage="_Test_Names", ThisKey="ID_Test_Catego", OtherKey="ID_Test_Catego")]
	public EntitySet<Test_Name> Test_Names
	{
		get
		{
			return this._Test_Names;
		}
		set
		{
			this._Test_Names.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Test_Names(Test_Name entity)
	{
		this.SendPropertyChanging();
		entity.Test_Category = this;
	}
	
	private void detach_Test_Names(Test_Name entity)
	{
		this.SendPropertyChanging();
		entity.Test_Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EM_ID;
	
	private string _UserName;
	
	private string _PassWord;
	
	private string _Role;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEM_IDChanging(int value);
    partial void OnEM_IDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
	
	public UserTable()
	{
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EM_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int EM_ID
	{
		get
		{
			return this._EM_ID;
		}
		set
		{
			if ((this._EM_ID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEM_IDChanging(value);
				this.SendPropertyChanging();
				this._EM_ID = value;
				this.SendPropertyChanged("EM_ID");
				this.OnEM_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PassWord
	{
		get
		{
			return this._PassWord;
		}
		set
		{
			if ((this._PassWord != value))
			{
				this.OnPassWordChanging(value);
				this.SendPropertyChanging();
				this._PassWord = value;
				this.SendPropertyChanged("PassWord");
				this.OnPassWordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_UserTable", Storage="_Employee", ThisKey="EM_ID", OtherKey="E_ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.UserTable = null;
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.UserTable = this;
					this._EM_ID = value.E_ID;
				}
				else
				{
					this._EM_ID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ser")]
public partial class Ser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _service_ID;
	
	private System.Nullable<int> _Test_ID;
	
	private System.Nullable<int> _Patient_ID;
	
	private System.Nullable<System.DateTime> _Date_Service;
	
	private System.Nullable<double> _Weight;
	
	private System.Nullable<double> _Height;
	
	private System.Nullable<double> _Hct;
	
	private System.Nullable<int> _Age;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Test_Name> _Test_Name;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_IDChanging(int value);
    partial void Onservice_IDChanged();
    partial void OnTest_IDChanging(System.Nullable<int> value);
    partial void OnTest_IDChanged();
    partial void OnPatient_IDChanging(System.Nullable<int> value);
    partial void OnPatient_IDChanged();
    partial void OnDate_ServiceChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_ServiceChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnHctChanging(System.Nullable<double> value);
    partial void OnHctChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    #endregion
	
	public Ser()
	{
		this._Patient = default(EntityRef<Patient>);
		this._Test_Name = default(EntityRef<Test_Name>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int service_ID
	{
		get
		{
			return this._service_ID;
		}
		set
		{
			if ((this._service_ID != value))
			{
				this.Onservice_IDChanging(value);
				this.SendPropertyChanging();
				this._service_ID = value;
				this.SendPropertyChanged("service_ID");
				this.Onservice_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_ID", DbType="Int")]
	public System.Nullable<int> Test_ID
	{
		get
		{
			return this._Test_ID;
		}
		set
		{
			if ((this._Test_ID != value))
			{
				if (this._Test_Name.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTest_IDChanging(value);
				this.SendPropertyChanging();
				this._Test_ID = value;
				this.SendPropertyChanged("Test_ID");
				this.OnTest_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int")]
	public System.Nullable<int> Patient_ID
	{
		get
		{
			return this._Patient_ID;
		}
		set
		{
			if ((this._Patient_ID != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatient_IDChanging(value);
				this.SendPropertyChanging();
				this._Patient_ID = value;
				this.SendPropertyChanged("Patient_ID");
				this.OnPatient_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Service", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date_Service
	{
		get
		{
			return this._Date_Service;
		}
		set
		{
			if ((this._Date_Service != value))
			{
				this.OnDate_ServiceChanging(value);
				this.SendPropertyChanging();
				this._Date_Service = value;
				this.SendPropertyChanged("Date_Service");
				this.OnDate_ServiceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
	public System.Nullable<double> Weight
	{
		get
		{
			return this._Weight;
		}
		set
		{
			if ((this._Weight != value))
			{
				this.OnWeightChanging(value);
				this.SendPropertyChanging();
				this._Weight = value;
				this.SendPropertyChanged("Weight");
				this.OnWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
	public System.Nullable<double> Height
	{
		get
		{
			return this._Height;
		}
		set
		{
			if ((this._Height != value))
			{
				this.OnHeightChanging(value);
				this.SendPropertyChanging();
				this._Height = value;
				this.SendPropertyChanged("Height");
				this.OnHeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hct", DbType="Float")]
	public System.Nullable<double> Hct
	{
		get
		{
			return this._Hct;
		}
		set
		{
			if ((this._Hct != value))
			{
				this.OnHctChanging(value);
				this.SendPropertyChanging();
				this._Hct = value;
				this.SendPropertyChanged("Hct");
				this.OnHctChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
	public System.Nullable<int> Age
	{
		get
		{
			return this._Age;
		}
		set
		{
			if ((this._Age != value))
			{
				this.OnAgeChanging(value);
				this.SendPropertyChanging();
				this._Age = value;
				this.SendPropertyChanged("Age");
				this.OnAgeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Ser", Storage="_Patient", ThisKey="Patient_ID", OtherKey="ID_Patient", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Sers.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Sers.Add(this);
					this._Patient_ID = value.ID_Patient;
				}
				else
				{
					this._Patient_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Name_Ser", Storage="_Test_Name", ThisKey="Test_ID", OtherKey="ID_Test", IsForeignKey=true)]
	public Test_Name Test_Name
	{
		get
		{
			return this._Test_Name.Entity;
		}
		set
		{
			Test_Name previousValue = this._Test_Name.Entity;
			if (((previousValue != value) 
						|| (this._Test_Name.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Name.Entity = null;
					previousValue.Sers.Remove(this);
				}
				this._Test_Name.Entity = value;
				if ((value != null))
				{
					value.Sers.Add(this);
					this._Test_ID = value.ID_Test;
				}
				else
				{
					this._Test_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test_Name");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
